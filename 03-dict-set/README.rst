======================================================================
Sample code for Chapter 3 - "Dictionaries and sets"
======================================================================

From the book "Fluent Python" by Luciano Ramalho (O'Reilly, 2015)
http://shop.oreilly.com/product/0636920032519.do

dialcodes.py
======================================================================

``dict`` オブジェクトの生成方法いろいろ。特に項目の順序指定について。

* いずれの生成方法でも ``==`` が成立する。

index.py vs index0.py vs index_default.py
======================================================================

* ``dict.setdefault()`` あるいは ``collections.defaultdict()`` の指南。
* 正規表現マッチオブジェクトの ``.finditer()``

strkeydict.py vs strkeydict0.py
======================================================================

組み込み ``dict`` と ``collections.UserDict`` の継承を比較する。
テーマは辞書オブジェクトの初期値か要素の勘定だろう。

* ``__missing__()`` のオーバーロードで何か不吉なことをしている気がする。
* ``__contains__()``, ``__setitem__()`` はこのように実装する。
* ダメなほうは ``dict`` の継承で ``get()`` をオーバーライドすること。
  こうする代わりに ``__setitem__()`` で key を文字列に変換するようにした。

``UserDict`` は最近はあまり使われていないと聞く。

transformdict.py
======================================================================

これは長いサンプルだ。後回し。

support/
======================================================================

使えそうなコード・調べたいコードを重点的にチェックする。

* ``array.array('d')``
* ``1/random.random()``: NumPy などが使えればもっと良い浮動小数点数乱数生成関数があるだろうが、こういう手もある。
* ``timeit.repeat()`` 再び。``number`` と ``repeat`` の違いを理解すること。
* ``sys.argv.remove()`` か。モジュール ``argparse`` 未使用時ならではの技法だ。
* ``sys.maxsize`` とは何か
* ``hash_diff()`` で何をしているか

  * ``format(sys.maxsize, 'b')`` で `'1'` が 63 個並んだ文字列が返る。
  * ``'{:>0{}b}'.format(hash(o1), MAX_BITS)`` がわからない。
    * ``>``: 右詰め
    * ``0``: 0 で埋めろ
    * ``{}`` 部分に桁数が入る。この場合は 63 桁。
    * ``b`` は二進数表示しろ
  * ``{!r:{width}}`` という書式指定はわかりやすい。

.. code:: pycon

   >>> %run support/hashdiff.py
   64-bit Python build
   1        000000000000000000000000000000000000000000000000000000000000001
                                                                            != 0
   1.0      000000000000000000000000000000000000000000000000000000000000001
   -------------------------------------------------------------------------------
   1.0      000000000000000000000000000000000000000000000000000000000000001
                           !! !   !! !! !!!   ! !!! ! !!   !!!   !          != 21
   1.0001   000000000000000110100011011011100010111010110001110001000000001
   -------------------------------------------------------------------------------
   1.0001   000000000000000110100011011011100010111010110001110001000000001
                          ! !!!  ! !! !!  !  !!!  !!!! !  !  !  !!          != 22
   1.0002   000000000000001101000110110111000101110101100011100010000000001
   -------------------------------------------------------------------------------
   1.0002   000000000000001101000110110111000101110101100011100010000000001
                         !!!! ! !!  !  ! !! !! !   ! !!! !! !!   !          != 23
   1.0003   000000000000010011101010010010101000110000010101010011000000001
   -------------------------------------------------------------------------------

* この著者は ``format()`` を完全にマスターしている。見習おう。

以上
