======================================================================
Sample code for Chapter 13 - "Operator overloading: doing it right"
======================================================================

From the book "Fluent Python" by Luciano Ramalho (O'Reilly, 2015)
http://shop.oreilly.com/product/0636920032519.do

bingo.py
======================================================================

従来どおり。

bingoaddable.py
======================================================================

変なファイル名だがクラス ``AddableBingoCage`` のコード。
C++ での ``operator+()`` と ``operator+=()`` に相当する
``__add__()`` と ``__iadd__()`` を実装する。

tombola.py
======================================================================

従来どおり。

unary_plus_decimal.py
======================================================================

モジュール ``decimal`` の独特のクセを実演する。

https://docs.python.org/ja/3/library/decimal.html

* ``with decimal.localcontext() as ctx:`` の習慣を理解する。

  * ``with`` のスコープに生成される ``Decimal`` オブジェクトの精度を決定する。
  * このスコープの内外で同じリテラルから ``Decimal`` オブジェクトを一つずつ生成しても
    精度が異なればオブジェクト同士も異なると判断される。

* ``decimal.getcontext()`` との違いは？

vector_py3_5.py
======================================================================

いつかのクラス ``Vector`` に演算子をオーバーロードする。

* ``__add__()``, ``__radd()__``: ベクトル加法

  * ``itertools.zip_longest()`` でシーケンスの長さを揃えることができる。

* ``__mul__()``, ``__rmul()__``: スカラー積

  * ``isinstance(..., numbers.Real)`` なので実数体上のベクトル空間のベクトルのようだ。

* ``__matmul__()``, ``__rmatmul__()`` はコードを見るとドット積を実装している。

  * 対応する演算子記号は ``@`` のようだ。``a @ b`` で ``__matmul__()`` が呼び出される
  * こちらは ``zip_longest()`` 不使用。ゼロになってしまうから伸ばさなくていいのか。

vector_v6.py
======================================================================

単項演算子を提供している。

* ``__neg__()`` は単項マイナス。
* ``__pos__()`` は実装する意味があるのかわからない。コピー演算子みたいなものだ。
* ``__add__(), __radd__()`` はもう調べた。

vector_v7.py
======================================================================

もう調べたことだがスカラー積のために ``__mul__(), __rmul()__`` を提供する。

vector_v8.py
======================================================================

調べた記憶があるが ``__eq__()`` を提供。

* 組み込み関数 ``all()`` が便利。この関数の存在は少なくとも知っておくこと。
* この実装だと浮動小数点数ベクトルとしては実用に耐えない。
  さっき見た ``decimal`` の精度制御のようなことが必要なはずだ。

vector2d_v3.py
======================================================================

何か目新しい機能追加はあるか？

以上
