======================================================================
Sample code for Chapter 15 - "Context managers and something else"
======================================================================

From the book "Fluent Python" by Luciano Ramalho (O'Reilly, 2015)
http://shop.oreilly.com/product/0636920032519.do

mirror.py
======================================================================

* クラス ``LookingGlass`` では標準出力を UNIX の ``tac`` のようにする。
* ``__enter__()``, ``__exit__()`` をクラスで実装すると ``with`` 文が使えるようになる。

  * ``__enter__()`` が返しているのはゴミか？
  * ``__exit__()`` で ``with`` スコープで送出された例外をハンドルできると言っている。

* ``text[::-1]`` は思いつかなかった。
* この手のクラスはまず間違いなく ``with`` 文で利用するのだが、
  ``with`` なしでも利用することはできる。
  ユーザーが手動で ``.__enter()__`` と ``.__exit()__`` を呼び出せばいい。

mirror_gen.py
======================================================================

同じことを関数でも実現できる。それには ``contextlib.contextmanager`` で decorate する。

* ``yield`` 文がクラス版 context manager の ``__enter__()`` に相当し、
  それ以降が ``__exit__()`` になるのだろう。

* 利用方法は ``LookingGlass`` とまったく同じ。手動でやるときも同じ。

mirror_gen_exc.py
======================================================================

mirror_gen.py の例外対応版。

* ``try`` ブロック内に ``yield`` を持ってくる。

  * その ``finally`` 節が ``__exit__()`` に相当するように変わる。
  * ``except`` 節でユーザー由来の例外をハンドルできる。
    この実装では例外を握りつぶして exit のタイミングで標準出力に
    カスタムメッセージを出力する。

以上
